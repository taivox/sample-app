services:
  backend:
    image: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
    ports:
      - '8080:8080'
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      POSTGRES_SERVER_HOST: db
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
      POSTGRES_PASSWORD: postgres
      CLIENT_URL: http://localhost:3000

  frontend:
    image: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
    ports:
      - '3000:3000'
    restart: unless-stopped
    volumes:
      - ./frontend/config/config.js:/usr/share/nginx/html/config.js
      - ./frontend/config/nginx.conf:/etc/nginx/nginx.conf

  db:
    image: postgres:17-alpine3.21
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - '5432:5432'
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
      interval: 1s
      retries: 10
      timeout: 1s
